* TODO Modules
  The modules themselves have docs? Shit. That's a lot of source-code.

  You know what, though? We can't do this, I believe as long as we
  rely on the reader: the reader will have finished parsing the thing
  before we can backtrack and read the contained expressions.

  We'd have to parse the file ourselves, looking for e.g. =doc=-forms;
  unless, of course, we did a dirty hack and read the embedded
  expressions in through a string port.

  At that point, though, why aren't we just parsing the god-damn
  thing?

  Interesting things to do with modules: list of exports; oh, shit:
  should the exports link to the docs? We have a table of contents;
  but, yeah: maybe. We'd have to check which objects we have
  documentation for.

  Could we do a table and pluck a description from the docs?
* TODO Use [[http://wiki.call-cc.org/man/4/Non-standard%2520read%2520syntax#multiline-string-constant-with-embedded-expressions][embedded expressions]] instead of string-templates.
  Holy shit: is it the case that we don't have to escape backslashes?
* DONE =cock-bin=
  CLOSED: [2012-08-06 Mon 17:18]
  #+BEGIN_SRC scheme :mkdirp yes :tangle bin/cock-org.scm :shebang #!/usr/bin/env chicken-scheme
    (use alist-lib args cock-parse debug usage)
    
    (define options
      (list (args:make-option (l latex) #:none "Output to LaTeX" (set! arg #t))
            (args:make-option (h ? help) #:none "Help" (set! arg #t))))
    
    (define usage
      (make-usage
       (lambda (program)
         (format #t "Usage: ~a [OPTIONS]... FILE...~%" program)
         (print (args:usage options)))))
    
    (receive (options files)
      (args:parse (command-line-arguments) options)
      (cond ((alist-ref/default options 'help #f) (usage))
            ((null? files) (usage 1))
            (else (tex-write-docexprs (apply parse-files files)))))
    
  #+END_SRC
* TODO Line-numbers are pretty meaningless.
  Not only do they not correspond to the file, they're even
  inconsistent within the function; since they go through =pp=.
* TODO Binary
  Initially, let's parse individual files; but let's quickly follow up
  with something for eggs that reads name, email, &c. from there:
  possibly converts =includes= into sections.

  What should the actual name of the includes section be, though; fuck
  it: maybe do the include and look for =@(heading ...)=; yes.

  Maybe all we have to do is parse the metadata and cat the .scm files
  into cock; how do we control the order of the files, though, if not
  for =include=? But then we have to scour everything for =include=.

  If only we could depend upon Chicken to do the stitching.
* TODO Classes?
  Maybe this can be an extension.
* TODO Source at end?
* TODO Types from the Chicken wiki
  See [[https://wiki.call-cc.org/edit-help][here]]:

  - read
  - parameter
  - record
  - string
  - class
  - method
  - constant
  - setter
  - syntax
  - type

  Records are a really good idea; have to know: =defstruct=,
  =define-record=, =define-record-type=, &c.
* TODO Define an intermediate long-hand.
  If this, for instance, is our long-hand:

  #+BEGIN_SRC scheme
    (define (procedure a)
      @(description: "Do something."
        parameters: ((a "Thing to do"))
        to: "Thing done")
      (void))
  #+END_SRC

  we can come up with any number of short-hands that reduce to it.
* TODO =read=
  It looks like read optionally [[http://wiki.call-cc.org/eggref/4/lazy-ffi#read-syntax][takes parameters]]; it appears as though
  a =@to= is necessary. Initial parameter should be something
  describing the read-form; e.g. =#~string=, =#~(item ...)=.
* TODO Ability to suppress internally documented functions.
  Let's use =@internal=. Or: instead of =@<identifier>=, we should
  reuse the keyword mechanism? Principle of least surprise? Would look
  like: =internal:=. All the asperands are alien, I think.

  On the other hand, how would you document keywords? No, we have to
  resort to something noisy.

  #+BEGIN_SRC scheme
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; If we do this, we can't document keywords named `to:'.
        (to: "Another thing")
        ;; That's why we settled on this:
        (@to "Another thing")
        @internal)
      'b)
  #+END_SRC

  Or, fuck it: just use naked symbols:

  #+BEGIN_SRC scheme
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; Don't see how we can get around this one.
        (@to "Another thing")
        internal)
      'b)
    
    (define (procedure a)
      @("Procedure does something."
        (parameters
         (a "Parameter"))
        ;; Don't see how we can get around this one.
        (to "Another thing")
        internal)
      'b)
    
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; Don't see how we can get around this one.
        to: "Another thing"
        internal:)
      'b)
    
    ;;; If we're going keyword-heavy:
    
    (define (procedure a)
      ;; `description:' already fucks up the indentation.
      @(description: "Procedure does something."
                     parameters:))
    
    (define (procedure a)
      @("Procedure does something."
        parameters: '((a "Parameter"))
        to: "Another thing"
        internal: #t))
    
  #+END_SRC
* TODO Get metadata from egg.
  Authors, &c.
* TODO Test parse module.
  #+BEGIN_SRC scheme :tangle test-parse.scm :shebang #!/usr/bin/env chicken-scheme
    (include "cock-parse")
    (import cock-parse)
    (use debug defstruct)
    
    @(heading "Harro thar!")
    
    (+ 2 2)
    
    (define (procedure a)
      @("Do something."
        (a "Thing to do")
        (@to "Thing done"))
      (void))
    
    (define (tex-procedure-to special-parameters)
      @("Was, are we wirklich?"
        (special-parameters "Very special")
        (@to "There procedure thither"))
      (alist-ref/default special-parameters '@to '("unspecified")))
    
    (define-syntax harro
      @("Tharths; tharths very thither."
        (x "An opacity")
        (... "Other opacities")
        (@to "Clairvoyance"))
      (lambda (e r c) 2))
    
    (set-sharp-read-syntax!
     @("Registers a shared library."
       (library "The library to register"))
     #\&
     void)
    
    (set-read-syntax!
        @("Registers a shared library."
          (library "The library to register"))
     #\&
     void)
    
    (set-parameterized-read-syntax!
     @("Registers a shared library."
       (library "The library to register"))
     #\&
     void)
    
    (defstruct a
      @("This is for reals."
        (b "Yes")
        (c "No")
        (d "Maybe"))
      b c d)
    
    (define-record a
      @("This is for reals."
        (b "Yes")
        (c "No")
        (d "Maybe"))
      b c d)
    
    (define-record-type a
      @("This is for reals."
        (b "Yes")
        (c "No")
        (d "Maybe"))
      (make-a b c d)
      a?
      (b a-b set-a-b!)
      (c a-c set-a-c!)
      (d a-d set-a-d!))
    
    (tex-write-docexprs (parse-file "test-parse.scm"))
    
  #+END_SRC

  #+BEGIN_SRC makefile :tangle test-parse.mk :shebang #!/usr/bin/unexpand -t 4
    all: test-parse.scm test-parse.mk
        CHICKEN_SCHEME_OPTIONS='-X cock' ./test-parse.scm > test-parse.tex && \
        xelatex -shell-escape test-parse && \
        xelatex -shell-escape test-parse && \
        xelatex -shell-escape test-parse && \
        evince test-parse.pdf
    
    test-parse.scm:
        org-tangle TODO.org
    
    test-parse.mk:
        org-tangle TODO.org
    
  #+END_SRC
* TODO Records
* TODO Multiple authors (maintainer, &c.)
  [[http://tex.stackexchange.com/questions/9594/adding-more-than-one-author-with-different-affiliation][Using footnotes]] and [[http://tex.stackexchange.com/questions/4805/whats-the-correct-use-of-author-when-multiple-authors][using \texttt{\char`\\ and}]].
* TODO Test the embedded reader-macro with compiled code.
  #+BEGIN_SRC scheme :tangle test-compiled.scm :shebang #!/usr/bin/env chicken-scheme
    (use cock)
    
    @(test "This should be a no√∂p.")
    
  #+END_SRC

  [[http://wiki.call-cc.org/man/4/faq#why-does-define-reader-ctornot-work-in-my-compiled-program][Readers in compiled code]].

  #+BEGIN_SRC sh :tangle test-compiled.sh :shebang #!/usr/bin/env bash
    CHICKEN_SCHEME_OPTIONS="-X cock" ./test-compiled.scm
    
  #+END_SRC
