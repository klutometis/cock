* TODO Define an intermediate long-hand.
  If this, for instance, is our long-hand:

  #+BEGIN_SRC scheme
    (define (procedure a)
      @(description: "Do something."
        parameters: ((a "Thing to do"))
        to: "Thing done")
      (void))
  #+END_SRC

  we can come up with any number of short-hands that reduce to it.
* TODO =read=
  It looks like read optionally [[http://wiki.call-cc.org/eggref/4/lazy-ffi#read-syntax][takes parameters]]; it appears as though
  a =@to= is necessary. Initial parameter should be something
  describing the read-form; e.g. =#~string=, =#~(item ...)=.
* TODO Ability to suppress internally documented functions.
  Let's use =@internal=. Or: instead of =@<identifier>=, we should
  reuse the keyword mechanism? Principle of least surprise? Would look
  like: =internal:=. All the asperands are alien, I think.

  On the other hand, how would you document keywords? No, we have to
  resort to something noisy.

  #+BEGIN_SRC scheme
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; If we do this, we can't document keywords named `to:'.
        (to: "Another thing")
        ;; That's why we settled on this:
        (@to "Another thing")
        @internal)
      'b)
  #+END_SRC

  Or, fuck it: just use naked symbols:

  #+BEGIN_SRC scheme
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; Don't see how we can get around this one.
        (@to "Another thing")
        internal)
      'b)
    
    (define (procedure a)
      @("Procedure does something."
        (parameters
         (a "Parameter"))
        ;; Don't see how we can get around this one.
        (to "Another thing")
        internal)
      'b)
    
    (define (procedure a)
      @("Procedure does something."
        (a "Parameter")
        ;; Don't see how we can get around this one.
        to: "Another thing"
        internal:)
      'b)
    
    ;;; If we're going keyword-heavy:
    
    (define (procedure a)
      ;; `description:' already fucks up the indentation.
      @(description: "Procedure does something."
                     parameters:))
    
    (define (procedure a)
      @("Procedure does something."
        parameters: '((a "Parameter"))
        to: "Another thing"
        internal: #t))
    
  #+END_SRC
* TODO Get metadata from egg.
  Authors, &c.
* TODO Test parse module.
  #+BEGIN_SRC scheme :tangle test-parse.scm :shebang #!/usr/bin/env chicken-scheme
    (include "cock-parse")
    (import cock-parse)
    (use debug)
    
    @(heading "Harro thar!")
    
    (+ 2 2)
    
    (define (procedure a)
      @("Do something."
        (a "Thing to do")
        (@to "Thing done"))
      (void))
    
    (define (tex-procedure-to special-parameters)
      @("Was, are we wirklich?"
        (special-parameters "Very special")
        (@to "There procedure thither"))
      (alist-ref/default special-parameters '@to '("unspecified")))
    
    (define-syntax harro
      @("Tharths; tharths very thither."
        (x "An opacity")
        (... "Other opacities")
        (@to "Clairvoyance"))
      (lambda (e r c) 2))
    
    @(read "#~library"
           "Registers a shared library."
           (library "The library to register"))
    
    (tex-write-docexprs (parse-file "test-parse.scm"))
    
  #+END_SRC
* TODO Records
* TODO Multiple authors (maintainer, &c.)
  [[http://tex.stackexchange.com/questions/9594/adding-more-than-one-author-with-different-affiliation][Using footnotes]] and [[http://tex.stackexchange.com/questions/4805/whats-the-correct-use-of-author-when-multiple-authors][using \texttt{\char`\\ and}]].
* TODO Test the embedded reader-macro with compiled code.
  #+BEGIN_SRC scheme :tangle test-compiled.scm :shebang #!/usr/bin/env chicken-scheme
    (use cock)
    
    @(test "This should be a no√∂p.")
    
  #+END_SRC

  [[http://wiki.call-cc.org/man/4/faq#why-does-define-reader-ctornot-work-in-my-compiled-program][Readers in compiled code]].

  #+BEGIN_SRC sh :tangle test-compiled.sh :shebang #!/usr/bin/env bash
    CHICKEN_SCHEME_OPTIONS="-X cock" ./test-compiled.scm
    
  #+END_SRC
